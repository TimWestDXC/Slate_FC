/*
    CREATE

    T. D. West 25 - 28 June 1996
    integrated with !Slate_FC application
    T. D. West 7 to 17 October 1996
    T. D. West 16 January 1997
    updated to use new scoring method
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "constant.h"
#include "data_io.h"

#define MAX_BUFFER_SIZE 256

char buffer[MAX_BUFFER_SIZE];

const char *cantopen = "Cannot open the %s output file\n";
const char *output   = "output";

void create(void) {

    FILE *fin;
    FILE *fdout;
    FILE *fgout;
    FILE *fpout;
     /*
        attempt to open new database file
    */
    fdout = fopen(data_filename,    "wb");
    fgout = fopen(goalies_filename, "wb");
    fpout = fopen(played_filename,  "wb");
    if ((fdout == NULL) || (fgout == NULL) || (fpout == NULL)) {
        if (fgout == NULL) {
            printf(cantopen, "goalie", output);
        }
        else {
            fclose(fgout);
        }
        if (fdout == NULL) {
            printf(cantopen, "data", output);
        }
        else {
            fclose(fdout);
        }
        if (fpout == NULL) {
            printf(cantopen, "played", output);
        }
        else {
            fclose(fpout);
        }
    }
    else {
        /*
            number specified
        */
        if ((fin = fopen(player_filename, "r")) == NULL) {
            printf(cantopen, "players", "input");
        }
        else {
            int           no_players;
            gen_rec_type *dptr;
            int           i;
            int           datasize;
            int           offset;
            int           length;
            /*
                count the number of players names in the input file
            */
            no_players = 0;
            while (fgets(buffer, MAX_BUFFER_SIZE, fin) != NULL) {
                no_players++;
            }
            /*
                rewind the input file
            */
            rewind(fin);
            /*
                write played data to file
            */
            i = 0;
            fwrite(&i, sizeof(int), no_players, fpout);
            /*
                create a single 'blank' player record
            */
            datasize = sizeof(int) * no_players;
            dptr = (gen_rec_type *)malloc(datasize);
            /*
                write no_players to data file
            */
            fwrite(&no_players, sizeof(int), 1, fdout);
            /*
                write 'blank' data to output file
            */
            for (i = 0; i < no_players; i++) {
                dptr->score[i] = UNUSED_SCORE;
            }
            for (i = 0; i < no_players; i++) {
                dptr->score[i] = SELF_SCORE;
                fwrite(dptr, datasize, 1, fdout);
                dptr->score[i] = UNUSED_SCORE;
            }
            free(dptr);
            /*
                Now create new goalie data file
                write no_players to goalie file
            */
            fwrite(&no_players, sizeof(int), 1, fgout);
            offset = sizeof(int) * (2 * no_players + 1);
            length = 0;
            for (i = 0; i < no_players; i++) {
                fwrite(&offset, sizeof(int), 1, fgout);
                fwrite(&length, sizeof(int), 1, fgout);
            }
        }
        /*
            all done, close input & output files
        */
        fclose(fin);
        fclose(fdout);
        fclose(fgout);
        fclose(fpout);
    }
}
